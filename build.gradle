apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'scrooge-gradle-plugin'

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1' }
    dependencies { classpath 'com.github.iamsteveholmes:scrooge-gradle-plugin:0.5' }
}

apply plugin: 'fatjar'

compileScrooge {
    thriftFiles = fileTree(dir: "src/main/thrift", include: "**/*.thrift")
    dest = file("src/gen/scala")
    opts = ["--finagle"]
}

version='1.0'

project.targetCompatibility = 1.7 

mainClassName = 'me.gregd.cineworld.util.JettyBootstrap' //Starts webservice on port 9001 by default

repositories {
  mavenCentral()
  maven { url = 'https://github.com/mandubian/mandubian-mvn/raw/master/snapshots/' }
  maven { url = 'https://github.com/mandubian/mandubian-mvn/raw/master/releases/' }
  maven { url = 'http://repo.typesafe.com/typesafe/releases/' }
  maven { url = 'http://oss.sonatype.org/content/repositories/snapshots/' }
  maven { url = 'http://oss.sonatype.org/content/repositories/releases' }
  maven { url = 'http://download.eclipse.org/rt/eclipselink/maven.repo' }
}

sourceSets {
    main {
        scala {
            srcDir 'src/gen/scala'
        }
    }
}

fatJar {
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    manifest.attributes('Main-Class': mainClassName)
}

//Deploy origin/master/HEAD to production using ansible. Expects passwordless login for 'grogs' to be setup.
task deploy(type:Exec, dependsOn: fatJar) {
    def archivePath = fatJar.archivePath
    def archiveName = fatJar.archiveName
    //environment ANSIBLE_FORCE_COLOR: 'true'
    workingDir = './ansible'
    executable = 'ansible-playbook'
    args = [
        '--inventory-file=hosts',
        '--verbose',
        "--extra-vars=\"archiveName=${archiveName}\" \"archivePath=${archivePath}\" ",
        'deploy.yml'
    ]
}

configure(deploy) {
    group = "Deployment"
    description = "Deploy the project as-is to production as a fat JAR"
}

dependencies {
  compile 'org.scala-lang:scala-library:2.10.2'
  compile 'org.scala-lang:scala-compiler:2.10.2'

  //finacle and thrift
  compile 'com.twitter:util-collection_2.10:6.12.1'
  compile 'com.twitter:scrooge-core_2.10:3.12.3'
  compile 'com.twitter:finagle-core_2.10:6.12.1'
  compile 'com.twitter:finagle-thrift_2.10:6.12.1'
  compile 'org.apache.thrift:libthrift:0.9.1'

  //shapeless for convertion
  compile 'com.chuusai:shapeless_2.10.2:2.0.0-M1'


    //Database libraries
  compile 'com.googlecode.flyway:flyway-core:2.1.1'
  compile 'com.typesafe.slick:slick_2.10:2.0.1'
  compile 'com.h2database:h2:1.3.164'

  //compile 'org.threeten:threetenbp:0.7'
  //compile 'joda-time:joda-time:2.2'
  //compile 'com.github.nscala-time:nscala-time_2.10:0.4.0'

  compile 'org.scalaj:scalaj-http_2.10:0.3.10' //Simple HTTP client

  compile 'org.json4s:json4s-native_2.10:3.2.4'
  compile 'org.json4s:json4s-jackson_2.10:3.2.4'

  compile 'org.eclipse.jetty:jetty-webapp:8.1.10.v20130312'

  compile 'org.scalatra:scalatra_2.10:2.2.1'
  testCompile 'org.scalatra:scalatra-scalatest_2.10:2.2.1'
  compile 'org.scalatra:scalatra-json_2.10:2.2.1'

  //For Guava caching and a scala wrapper
  compile 'com.google.guava:guava:14.0'
  compile('org.feijoas:mango_2.10:0.9') {
      exclude module: 'jsr305'
  }
  compile 'com.google.code.findbugs:jsr305:1.3.7'
  
  compile 'com.typesafe:scalalogging-slf4j_2.10:1.0.1'

  compile 'ch.qos.logback:logback-classic:1.0.13'

  testCompile 'org.scalatest:scalatest_2.10:1.9.1'

}

task filmsToWatch(type: JavaExec, dependsOn: build) {
    main = 'me.gregd.cineworld.util.FilmsToWatch'
    classpath = sourceSets.main.runtimeClasspath
}

//applicationDistribution {
//    main {
//
//    }
//}

//
//task deployToVps(dependsOn: installApp, type: copy) {
//    from
//}
//
//task deploy(dependsOn: installApp) << {
//    println "deployed"
//}
